#!/bin/env python
from multiprocessing import *
import subprocess
import time
import os,sys
import signal
import re

#assumes ssh keys are set
user,ip = 'root','10.217.203.54'
prog = '/usr/bin/rsync'

def rsync(srcp,dstp):
    # Find Total Bytes to transmit
    args = ' -q -az --no-o --no-g '
    cmd = prog + args + srcp + dstp 
    print cmd
    os.system(cmd)

def inthandler(c,f):
    print 'User Terminated. Exiting.'
    sys.exit(0)

def do_rsync_dryrun(srcp,dstp):
    args = ' --dry-run --stats -az --no-o --no-g '
    cmd = prog + args + srcp + dstp 
    s1 = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    s2 = subprocess.Popen(['grep',"Total transferred file size"], stdin=s1.stdout, stdout=subprocess.PIPE)
    out,err = s2.communicate()
    #print out
    val, rc, _ = -1, s2.wait(),s1.wait()

    if rc != 0:
        print 'rsync failed. cannot get transfer size'
        os.exit(1)
    out = ''.join(out.split(','))
    m = re.search(': (\d+) bytes', out)
    if m: val = m.group(1)
    if val == -1:
        print 'rsync failed. cannot get transfer bytes'
        os.exit(1)
        
    return int(val)

def get_cur_size(dst):
    if not islocal:
        _,path = dst.split(':')
        path = ' du -sb ' + path
        cmd="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet " + user +'@' + ip + path
    else:
        cmd = ' du -sb ' + dst
    #print cmd
    FNULL = open(os.devnull, 'w')
    s1 = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=FNULL)
    out, err = s1.communicate()
    rc = s1.wait()
    if rc != 0:
        #print 'du failed. cannot get initial size'
        return 0
    #print out
    b,p = out.split()
    return int(b)

def do_rsync(srcp,dstp):
    signal.signal(signal.SIGINT, inthandler)

    #print 'Calculating bytes to transfer ...',
    val = do_rsync_dryrun(srcp,dstp)
    print val
    if val == 0:
        print 'Nothing to Transfer. Exiting.'
        sys.exit(0)

    init = get_cur_size(dstp)
    #print 'initial target size ' , init
    p1 = Process(target=rsync, args=(srcp,dstp,))
    p1.start()

    while p1.is_alive(): 
        cur = get_cur_size(dstp) - init
        if cur > val: break
        if cur != -1:
            time.sleep(1)
            sys.stdout.write('\rCompleted: %.2f %%  (%d/%d) ' % ((round(float(cur)/float(val)*100.0,2)), cur, val))
            sys.stdout.flush()
        else:
            time.sleep(1)
            sys.stdout.write('\rIn Progress ...')
            sys.stdout.flush()
    print

if __name__ == "__main__":
    
    #print sys.argv
    islocal = False
    if len(sys.argv) == 1:
        cpath = os.environ['P4CLIENT']
        if not cpath:
            print 'Not in p4 client. Exiting.'
            sys.exit(0)
        srcpath = "/work/" + cpath  + "/ "
        dstpath = user + '@' + ip + ':' + srcpath
    elif len(sys.argv)==3:
        srcpath = sys.argv[1] + ' '
        dstpath = sys.argv[2]
        islocal = True
    else:
        sys.exit(0)
     
    #print 'copying ', srcpath, ' to ', dstpath
    do_rsync(srcpath,dstpath)
    sys.exit(0)
